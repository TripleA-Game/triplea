plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'com.install4j.gradle' version '7.0.1'
    id 'de.undercouch.download' version '3.4.3'
}

description = 'TripleA is a free online turn based strategy game and board game engine, similar to such board games as Axis & Allies or Risk.'
mainClassName = 'games.strategy.engine.framework.GameRunner'

ext {
    artifactsDir = file("$buildDir/artifacts")
    releasesDir = file("$buildDir/releases")
    remoteLibsDir = file('.remote-libs')
    rootFilesDir = file("$buildDir/rootFiles")
    shadowLibsDir = file("$buildDir/shadowLibs")

    gameEnginePropertiesFile = file('game_engine.properties')
}

def getEngineVersion() {
    if (project.hasProperty('engineVersion')) {
        return project.engineVersion
    }

    def props = new Properties()
    gameEnginePropertiesFile.withInputStream { props.load(it) }
    def devEngineVersion = props.getProperty('engine_version')
    if (!devEngineVersion) {
        throw new GradleException("unable to determine engine version: "
                + "you must define either the project property 'engineVersion' or the game engine property 'engine_version'")
    }
    return "${devEngineVersion}"
}

def remoteFile(url) {
    def file = file("$remoteLibsDir/${java.nio.file.Paths.get(new URI(url).path).fileName}")
    download {
        src url
        dest file
        overwrite false
    }
    files(file)
}

version = getEngineVersion()

jar {
    manifest {
        attributes 'Main-Class': mainClassName, 'TripleA-Version': version
    }
}

dependencies {
    compile 'org.postgresql:postgresql:42.2.2'
    compile 'com.github.openjson:openjson:1.0.10'
    compile 'com.google.guava:guava:24.1-jre'
    compile 'com.googlecode.soundlibs:jlayer:1.0.1.4'
    compile 'com.sun.mail:javax.mail:1.6.1'
    compile 'commons-codec:commons-codec:1.11'
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.httpcomponents:httpclient:4.5.5'
    compile 'org.apache.httpcomponents:httpmime:4.5.5'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'org.mindrot:jbcrypt:0.4'
    compile 'org.yaml:snakeyaml:1.19'
    compile 'com.yuvimasory:orange-extensions:1.3.0'
    compile 'commons-cli:commons-cli:1.4'
    compile remoteFile('https://github.com/kirill-grouchnikov/substance/raw/f894ef784a2ac20acf13e6ed2c7c26123399787b/drop/8.0.02/substance-8.0.02.jar')

    runtime remoteFile('https://github.com/kirill-grouchnikov/substance/raw/f894ef784a2ac20acf13e6ed2c7c26123399787b/drop/8.0.02/trident-1.5.00.jar')

    testCompile project(':test-common')
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.4.5'
    testCompile 'org.sonatype.goodies:goodies-prefs:2.2.4'
    testCompile 'org.testfx:testfx-junit5:4.0.13-alpha'
    testCompile 'org.testfx:testfx-core:4.0.13-alpha'

    if (JavaVersion.current() == JavaVersion.VERSION_1_9) {
        testRuntimeOnly 'org.testfx:openjfx-monocle:jdk-9+181'
    } else if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
        testRuntimeOnly 'org.testfx:openjfx-monocle:8u76-b04'
    }
}

task cleanRemoteLibs(type: Delete, group: LifecycleBasePlugin.BUILD_GROUP, description: 'Deletes the remote libraries directory.') {
    delete remoteLibsDir
}

shadowJar {
    destinationDir = shadowLibsDir
    baseName = 'triplea'
    classifier = 'all'
    version = version
}

task downloadAssets(group: 'release') {
    doLast {
        [
            'icons/triplea_icon_16_16.png',
            'icons/triplea_icon_32_32.png',
            'icons/triplea_icon_48_48.png',
            'icons/triplea_icon_64_64.png',
            'icons/triplea_icon_128_128.png',
            'icons/triplea_icon_256_256.png',
            'install4j/macosx-amd64-1.8.0_144.tar.gz',
            'install4j/windows-amd64-1.8.0_144.tar.gz',
            'install4j/windows-x86-1.8.0_144.tar.gz'
        ].each { path ->
            download {
                src "https://raw.githubusercontent.com/triplea-game/assets/master/$path"
                dest "$buildDir/assets/$path"
                overwrite false
            }
        }
    }
}

import com.install4j.gradle.Install4jTask
task generateInstallers(type: Install4jTask, dependsOn: [shadowJar, downloadAssets], group: 'release') {
    projectFile = file('build.install4j')
    release project.version
    doFirst {
        logger.lifecycle("building installer release of version '${project.version}'")
    }
}

task generateInstallerReleases(group: 'release', dependsOn: [generateInstallers]) {
    doLast {
        ant.chmod(dir: releasesDir, perm: '+x', includes: '*.sh')
    }
}

task generateZipReleases(type: Zip, group: 'release', dependsOn: shadowJar) {
    baseName = 'triplea'
    classifier = 'all_platforms'
    ['assets', 'dice_servers'].each { folder ->
        from(folder) {
            into(folder)
        }
    }
    from(gameEnginePropertiesFile)
    from(shadowJar.outputs) {
        into('bin')
    }
}

task release(group: 'release', dependsOn: [generateZipReleases, generateInstallerReleases]) {
    doLast {
        def artifacts = [
            file("$distsDir/triplea-${version}-all_platforms.zip"),
            file("$releasesDir/TripleA_${version}_macos.dmg"),
            file("$releasesDir/TripleA_${version}_unix.sh"),
            file("$releasesDir/TripleA_${version}_windows-32bit.exe"),
            file("$releasesDir/TripleA_${version}_windows-64bit.exe")
        ]
        artifacts.each {
            if (!it.exists()) {
                throw new GradleException("artifact '$it' does not exist")
            }
        }

        copy {
            from artifacts
            into artifactsDir
        }
    }
}

gradle.taskGraph.whenReady { graph ->
    graph.getAllTasks().any({
        if (it.name == "generateInstallers") {
            if (!project.hasProperty('install4jHomeDir')) {
                File propertiesFile = file("${System.getProperty('user.home')}/.gradle/gradle.properties")
                throw new RuntimeException("Specify install4jHomeDir in $propertiesFile")
            }
            def p = file(project.install4jHomeDir)
            logger.lifecycle('using install4j home directory ' + p.getAbsolutePath())
            it.project.install4j.installDir = file(project.install4jHomeDir)
        }
    })
}

checkstyleMain {
    maxWarnings = checkstyleMainMaxWarnings.toInteger()
}

checkstyleTest {
    maxWarnings = checkstyleTestMaxWarnings.toInteger()
}
