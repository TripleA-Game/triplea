#!/bin/bash

set -u

green="\e[92m"
blue="\e[34m"
normal="\e[0m"
bold="\e[1m"

javaFiles=$(mktemp)
sqlFiles=$(mktemp)
trap 'rm $javaFiles $sqlFiles' EXIT

find . -type f -name "*.java" > "$javaFiles"
find lobby-db/src/main/resources -type f -name "*.sql" > "$sqlFiles"

status=0


function main() {
  favorJava9CollectionsApi
  referToCollectionsByInterfaceType
  legacyApi
  databaseNamesAreLowerSnakeCase
  databaseTablesAreSingular
  noTabsInSql
}

function title() {
  echo -e "${bold}${blue}$1${normal}"
}

function example() {
  echo -e "${blue}Ex: $1${normal}"
}

function favorJava9CollectionsApi() {
  title "Verifying preference to use List.of(), Map.of() and Set.of() compared to java.util.Collections.*"
  example "instead of 'Collections.singleton(value)', use 'Set.of(value)'"
  local found=0

  while read -r file; do
    grep --color=auto -H -f .travis/style.include/disallowed-collection-calls "$file" && status=1 && found=1
    grep --color=auto -H -f .travis/style.include/disallowed-collection-imports "$file" && status=1 && found=1
  done <<< "$(cat "$javaFiles")"

  if [ "$found" -eq 0 ]; then
    echo -e "${green}[OK]${normal}"
  fi
  echo ""
}

function referToCollectionsByInterfaceType() {
  title "Assign to collection types using their interface"
  example "instead of 'ArrayList<String> list =', use 'List<String> list = '"
  local found=0

  while read -r file; do
    grep --color=auto -E -H -f .travis/style.include/concrete-collection-types "$file" && status=1 && found=1
  done <<< "$(cat "$javaFiles")"

  if [ "$found" -eq 0 ]; then
    echo -e "${green}[OK]${normal}"
  fi
  echo ""
}

function legacyApi() {
  title "Do not use legacy API tools like Vector"
  local found=0

  while read -r file; do
    grep --color=auto -H -f .travis/style.include/legacy-api "$file" && status=1 && found=1
  done <<< "$(cat "$javaFiles")"
  
  if [ "$found" -eq 0 ]; then
    echo -e "${green}[OK]${normal}"
  fi
  echo ""
}

function databaseNamesAreLowerSnakeCase() {
  title "Database entities should not be camelCased, lower_snake_case instead."
  example "Ex: instead of 'tableName' use 'table_name'"
  local found=0
  
  while read -r file; do
    grep --color=auto -H -E "[a-z][A-Z]" "$file" && status=1 && found=1
  done <<< "$(cat "$sqlFiles")"

  if [ "$found" -eq 0 ]; then
    echo -e "${green}[OK]${normal}"
  fi
  echo ""
}
  

function databaseTablesAreSingular() {
  title "Database tables should be singular"
  example "instead of 'create table words' use 'create table word'"
  local found=0
  
  while read -r file; do
    grep --color=auto -H -E -i "create table.*s$" "$file" && status=1 && found=1
  done <<< "$(cat "$sqlFiles")"


  if [ "$found" -eq 0 ]; then
    echo -e "${green}[OK]${normal}"
  fi
  echo ""
}

function noTabsInSql() {
  title "Use spaces in SQL and not tabs"
  local found=0
  while read -r file; do
    grep --color=auto -P -n "\t" "$file" && status=1 && found=1
  done <<< "$(cat "$sqlFiles")"
}

main

exit "$status"

