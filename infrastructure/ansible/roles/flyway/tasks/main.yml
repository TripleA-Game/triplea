- name: Create user on DB for application use
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ flyway_db_user }}"
    password: "{{ flyway_db_password }}"
    login_password: "{{ flyway_db_password }}"
    encrypted: yes
    state: "present"

- name: Ensure database is created
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ flyway_db_name }}"
    owner: "{{ flyway_db_user }}"

- name: Ensure user has access to the database
  become: true
  become_user: postgres
  postgresql_user:
    db: "{{ flyway_db_name }}"
    name: "{{ flyway_db_user }}"
    password: "{{ flyway_db_password }}"
    login_password: "{{ flyway_db_password }}"
    encrypted: yes
    priv: "ALL"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: "present"

# This is a hack because the previous tasks were supposed to set
# the DB level password for our user, but it typically does not.
# To achieve this, we'll run the native SQL commands to set the
# user DB password.
- name: "Hack, set password of {{ flyway_db_user }}"
  shell: echo "alter role {{ flyway_db_user }} with password '{{ flyway_db_password }}';"  | sudo -u postgres psql
  become_user: postgres

- name: Download flyway CLI
  get_url:
    url: "{{ flyway_download_location }}"
    dest: /tmp/flyway-cli.tar.gz
    mode: 777

- name: extract flyway
  unarchive:
    copy: no
    src: /tmp/flyway-cli.tar.gz
    dest: /tmp/

- name: deploy flyway conf file
  template:
    src: flyway.conf.j2
    dest: /tmp/flyway-5.2.4/conf/flyway.conf
    mode: "644"

- name: install unzip
  become: true
  apt:
    state: present
    name: unzip

- name: extract migrations
  unarchive:
     src: migrations.zip
     dest: /tmp/flyway-5.2.4/sql/
     mode: "644"

- name: run flyway
  shell: /tmp/flyway-5.2.4/flyway migrate
