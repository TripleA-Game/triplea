#!/bin/bash

set -eu

scriptDir="$(dirname "$0")"
readonly ENVIRONMENT_VAGRANT=vagrant
readonly ENVIRONMENT_PRODUCTION=production

# This script orchestrates deployments via ansible. If a prerelease deployment is done then
# fresh artifacts are built and deployed.

function usage() {
  echo "usage: $0 [options]"
  echo ""
  echo "Examples:"
  echo "$0 --environment $ENVIRONMENT_VAGRANT"
  echo "$0 --environment $ENVIRONMENT_VAGRANT --diff --dry-run --verbose"
  echo ""
  echo "[options]"
  echo "  --environment, -env [$ENVIRONMENT_VAGRANT|$ENVIRONMENT_PRODUCTION]"
  echo "      The target environment for the deployment."
  echo "         $ENVIRONMENT_VAGRANT is an environment that can be launched locally via a VM"
  echo "  --tags, -t [ansible tags]"
  echo "      Defaults to the empty set"
  echo "      Any tags that should be passed to ansible"
  echo "  --diff, -d"
  echo "      Ansible reports line-diffs of what has changed"
  echo "  --dry-run"
  echo "      Sets ansible to 'check' mode, no actual changes are made. Useful with '--diff'"
  echo "      This option can cause false positive failures if one action depends on a previous"
  echo "  --verbose, -v"
  echo "      Shows ansible verbose output, gives more detail about what has changed."
  exit 1
}


if [[ $# -eq 0 ]]; then
  usage
fi


DIFF_ARG=""
DRY_RUN_ARG=""
ENVIRONMENT=""
TAGS_ARG=""
VERBOSE_ARG=""

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    --env|--environment)
      ENVIRONMENT="$2"
      if [[ "$ENVIRONMENT" != "$ENVIRONMENT_PRODUCTION" \
         && "$ENVIRONMENT" != "$ENVIRONMENT_VAGRANT" ]]; then
        echo "Error, invalid value for --environment:  $ENVIRONMENT"
        usage
      fi
      shift # past argument
      shift # past value
      ;;
    --tags|-t)
      TAGS_ARG="--tags $2"
      shift # past argument
      shift # past value
      ;;
    --diff|-d|--d)
      DIFF_ARG="--diff"
      shift
      ;;
    --dry-run)
      DRY_RUN_ARG="--check"
      shift
      ;;
    --verbose|-v)
      VERBOSE_ARG="-v"
      shift
      ;;
    *)
      echo "Error, unknown option: $1"
      exit 1
      ;;
  esac
done

if [ -z "$ENVIRONMENT" ]; then
  echo "Missing arg: --environment"
  usage
fi

# If we are deploying to non-vagrant environment then we will need
# an ansible vault passphrase value to decrypt secrets.
VAULT_PASSWORD_FILE_ARG=""
if [ "$ENVIRONMENT" == "$ENVIRONMENT_PRODUCTION" ]; then
  if [ ! -f "$VAULT_PASSWORD_FILE" ]; then
    echo "Deployments to production environment requires vault password file: $VAULT_PASSWORD_FILE"
    exit 1
  fi

  VAULT_PASSWORD_FILE_ARG="--vault-password-file $VAULT_PASSWORD_FILE"
  readonly VAULT_PASSWORD_FILE_ARG
  # Decrypt SSH key and add it to ssh agent
  # Once available to SSH agent, when making SSH connections
  # this key will be offered by SSH for authentication.
  # This allows ansible to SSH to target servers and run
  # deployment commands. We assume servers have been created
  # with the corresponding public key already installed.
  ansible-vault view \
    --vault-password-file="$VAULT_PASSWORD_FILE" \
    ansible_ssh_key.ed25519 \
  | ssh-add -
fi

# Parse version number from product.properties, eg: "version = 2.5.234" -> "2.5.234"
VERSION=$(sed 's/.*=\s*//' "$(find .. -path "*/src/main/*" -name "product.properties")")
"$scriptDir/.include/build_latest_artifacts" "$VERSION"
export ANSIBLE_CFG="$scriptDir/ansible.cfg"

# Run deployment
ansible-playbook \
  --extra-vars "version=$VERSION" \
   --inventory "$scriptDir/ansible/inventory/$ENVIRONMENT" $DRY_RUN_ARG \
   $VAULT_PASSWORD_FILE_ARG $TAGS_ARG $DIFF_ARG $VERBOSE_ARG "$scriptDir/ansible/site.yml"

# Do Cleanup
if [ "$ENVIRONMENT" != "$ENVIRONMENT_VAGRANT" ]; then
  echo "Cleanup, removing old kernel patches.."
  ansible -i "$scriptDir/ansible/inventory/$ENVIRONMENT" all --become-user=root -m shell -a \
    "sudo apt autoremove -y"
fi
