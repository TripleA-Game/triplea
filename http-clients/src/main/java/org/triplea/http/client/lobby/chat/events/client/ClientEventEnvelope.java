package org.triplea.http.client.lobby.chat.events.client;

import com.google.gson.Gson;
import javax.annotation.Nonnull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import org.triplea.domain.data.ApiKey;

/** A message that is generated by client and sent to the server. */
@AllArgsConstructor
@Builder
@EqualsAndHashCode
public class ClientEventEnvelope {

  private static final Gson gson = new Gson();

  /** API key is used to identify the sender. */
  @Nonnull private final String apiKey;

  @Nonnull private final String messageType;
  @Getter @Nonnull private final String payload;

  public static ClientEventEnvelope fromJson(final String jsonString) {
    return gson.fromJson(jsonString, ClientEventEnvelope.class);
  }

  public ApiKey getApiKey() {
    return ApiKey.of(apiKey);
  }

  public ClientMessageType getMessageType() {
    try {
      return ClientMessageType.valueOf(messageType);
    } catch (final IllegalArgumentException e) {
      return ClientMessageType.UNKNOWN;
    }
  }

  public enum ClientMessageType {
    SLAP,
    MESSAGE,
    CONNECT,
    UPDATE_MY_STATUS,
    UNKNOWN
  }
}
