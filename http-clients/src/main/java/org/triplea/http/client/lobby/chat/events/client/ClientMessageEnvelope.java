package org.triplea.http.client.lobby.chat.events.client;

import com.google.gson.Gson;
import javax.annotation.Nonnull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import org.triplea.domain.data.ApiKey;

/**
 * A message that is generated by client and sent to the server. This object is intended to be
 * convertted to a JSON string and then sent.
 */
@AllArgsConstructor
@Builder
@EqualsAndHashCode
public class ClientMessageEnvelope {
  private static final Gson gson = new Gson();

  /** API key is used to identify the sender and must be valid on the server. */
  @Nonnull private final String apiKey;

  @Nonnull private final String messageType;
  @Getter @Nonnull private final String payload;

  public static ClientMessageEnvelope fromJson(final String jsonString) {
    return gson.fromJson(jsonString, ClientMessageEnvelope.class);
  }

  public ApiKey getApiKey() {
    return ApiKey.of(apiKey);
  }

  public ClientMessageType getMessageType() {
    try {
      return ClientMessageType.valueOf(messageType);
    } catch (final IllegalArgumentException e) {
      return ClientMessageType.UNKNOWN;
    }
  }

  /**
   * Message type is used by server to know which type of message it has received. Messages are sent
   * as JSON, 'payload' itself might be a JSON itself.
   */
  public enum ClientMessageType {
    SLAP,
    MESSAGE,
    CONNECT,
    UPDATE_MY_STATUS,
    UNKNOWN
  }
}
