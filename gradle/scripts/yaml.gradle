import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory
import com.github.fge.jsonschema.main.JsonSchemaFactory
import org.apache.http.HttpStatus
import org.asynchttpclient.DefaultAsyncHttpClient
import org.asynchttpclient.DefaultAsyncHttpClientConfig
import org.yaml.snakeyaml.LoaderOptions
import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8.1'
        classpath group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.8.8'
        classpath group: 'com.github.fge', name: 'json-schema-validator', version: '2.2.6'
        classpath group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.6'
        classpath group: 'org.asynchttpclient', name: 'async-http-client', version: '2.0.32'
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.18'
    }
}

def poll(Collection collection, Closure closure) {
    if (collection.empty) {
        return null
    }

    def value = null
    while ((value = collection.find(closure)) == null) {
        Thread.yield()
    }

    collection.remove(value)
    return value
}

// Temporary until SnakeYAML defaults to no duplicate keys per YAML 1.2 spec
// https://bitbucket.org/asomov/snakeyaml/issues/337/option-to-disallow-duplicate-keys
def validateHasNoDuplicateKeys(yamlFile) {
    def loaderOptions = new LoaderOptions()
    loaderOptions.setAllowDuplicateKeys(false)
    def yaml = new Yaml(loaderOptions)
    try {
        yamlFile.withInputStream { yaml.load(it) }
    } catch (Exception e) {
        throw new GradleException("$yamlFile: ${e.message}", e)
    }
}

def validateSchema(yamlFile, jsonSchemaFile) {
    def yamlMapper = new ObjectMapper(new YAMLFactory())
    def yaml = yamlMapper.readTree(yamlFile)

    def jsonMapper = new ObjectMapper()
    def yamlSchema = jsonMapper.readTree(jsonSchemaFile)
    def schema = JsonSchemaFactory.byDefault().getJsonSchema(yamlSchema)

    def report = schema.validate(yaml, true)
    if (!report.success) {
        throw new GradleException("$yamlFile: $report")
    }
}

ext.validateMapsYamlLinks = { yamlFile ->
    def yaml = new Yaml()
    def maps = yaml.load(yamlFile.text)
    def imageUrls = maps . collect { it['img'] } . findAll { it != null }

    def clientConfig = new DefaultAsyncHttpClientConfig.Builder()
            .setFollowRedirect(true)
            .build()
    def client = new DefaultAsyncHttpClient(clientConfig)
    try {
        def tasks = imageUrls.collect { client.prepareHead(it).execute() }

        def task = null
        while ((task = poll(tasks, { it.done })) != null) {
            def response = task.get()
            logger.info("Map thumbnail image status ($response.uri): $response.statusCode")
            if (response.statusCode != HttpStatus.SC_OK) {
                throw new GradleException("$response.uri: map thumbnail image not available ($response.statusCode)")
            }
        }
    } finally {
        client.close()
    }
}

ext.validateYaml = { yamlFile, jsonSchemaFile ->
    validateHasNoDuplicateKeys(yamlFile)
    validateSchema(yamlFile, jsonSchemaFile)
}
