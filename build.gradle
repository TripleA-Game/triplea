import net.ltgt.gradle.errorprone.CheckSeverity

// TODO: Remove once Spotless 3.17.0 is published to Gradle plugin portal and replace with entry under plugins
// see https://github.com/triplea-game/triplea/pull/4569#discussion_r247326720
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.17.0'
    }
}

plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'io.franzbecker.gradle-lombok' version '2.0' apply false
    id 'net.ltgt.errorprone' version '0.7' apply false
}

apply from: 'gradle/scripts/yaml.gradle'

description = 'TripleA is a free online turn based strategy game and board game engine, similar to such board games as Axis & Allies or Risk.'

ext {
    schemasDir = file('config/triplea/schemas')
}

check {
    dependsOn 'validateYamls'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

task validateYamls(group: 'verification', description: 'Validates YAML files.') {
    doLast {
        def lobbyServerYamlFile = file('lobby_server.yaml')
        validateYaml(lobbyServerYamlFile, file("$schemasDir/lobby_server.json"))

        def mapsYamlFile = file('triplea_maps.yaml')
        validateYaml(mapsYamlFile, file("$schemasDir/triplea_maps.json"))
        validateMapsYamlUris(mapsYamlFile)
    }
}

allprojects {
    apply plugin: 'com.diffplug.gradle.spotless'

    spotless {
        groovyGradle {
            target '*.gradle', 'gradle/**/*.gradle'

            endWithNewline()
            indentWithSpaces()
            trimTrailingWhitespace()
        }
    }
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'pmd'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'io.franzbecker.gradle-lombok'

    apply from: rootProject.file('gradle/scripts/release.gradle')
    apply from: rootProject.file('gradle/scripts/remote-lib.gradle')
    apply from: rootProject.file('gradle/scripts/spotless.gradle')
    apply from: rootProject.file('gradle/scripts/version.gradle')

    group = 'triplea'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    version = getProductVersion()

    ext {
        hamcrestVersion = '2.0.0.0'
        jbcryptVersion = '0.4'
        junitJupiterVersion = '5.4.0'
        mockitoVersion = '2.24.0'
        postgresqlVersion = '42.2.5'
        sonatypeGoodiesPrefsVersion = '2.2.5'
    }

    repositories {
        jcenter()
    }

    dependencies {
        errorprone 'com.google.errorprone:error_prone_core:2.3.2'

        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')
        }

        implementation 'com.google.guava:guava:27.0.1-jre'

        testImplementation 'com.github.npathai:hamcrest-optional:2.0.0'
        testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.4'
        testImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
        testImplementation 'org.junit-pioneer:junit-pioneer:0.3.0'
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.4.0'
        testRuntimeOnly 'org.slf4j:slf4j-nop:1.7.25'
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += [
            '-Xlint:all,-processing',
            '-Xmaxwarns', '1000'
        ]
        options.encoding = 'UTF-8'
        options.errorprone {
            check 'ByteBufferBackingArray', CheckSeverity.ERROR
            check 'CatchAndPrintStackTrace', CheckSeverity.ERROR
            check 'ClassCanBeStatic', CheckSeverity.ERROR
            check 'DefaultCharset', CheckSeverity.ERROR
            check 'EqualsGetClass', CheckSeverity.ERROR
            check 'EqualsIncompatibleType', CheckSeverity.ERROR
            check 'EqualsUnsafeCast', CheckSeverity.ERROR
            check 'FutureReturnValueIgnored', CheckSeverity.ERROR
            check 'ImmutableEnumChecker', CheckSeverity.ERROR
            check 'InconsistentCapitalization', CheckSeverity.ERROR
            check 'JdkObsolete', CheckSeverity.ERROR
            check 'MissingOverride', CheckSeverity.ERROR
            check 'MutableConstantField', CheckSeverity.ERROR
            check 'NonAtomicVolatileUpdate', CheckSeverity.ERROR
            check 'ObjectToString', CheckSeverity.ERROR
            check 'OperatorPrecedence', CheckSeverity.ERROR
            check 'ParameterName', CheckSeverity.OFF // workaround for https://github.com/google/error-prone/issues/780
            check 'PrivateConstructorForUtilityClass', CheckSeverity.ERROR
            check 'ReferenceEquality', CheckSeverity.ERROR
            check 'StringSplitter', CheckSeverity.ERROR
            check 'ThreadPriorityCheck', CheckSeverity.ERROR
            check 'UndefinedEquals', CheckSeverity.ERROR
            check 'UnnecessaryParentheses', CheckSeverity.ERROR
            check 'UnsafeReflectiveConstructionCast', CheckSeverity.ERROR
            check 'UnsynchronizedOverridesSynchronized', CheckSeverity.ERROR
            check 'WaitNotInLoop', CheckSeverity.ERROR
        }
        options.incremental = true

        // workaround for https://github.com/gradle/gradle/issues/2510
        if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            options.compilerArgs += ['--release', '8']
        }
    }

    tasks.withType(Test).configureEach {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    check {
        dependsOn 'integTest'
    }

    checkstyle {
        toolVersion = '8.12'
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = [samedir: configFile.parent]
    }

    checkstyleMain {
        maxWarnings = 0
        source sourceSets.main.output.resourcesDir
    }

    checkstyleTest {
        maxWarnings = 0
        source sourceSets.test.output.resourcesDir
    }

    compileTestJava {
        options.errorprone {
            check 'ClassCanBeStatic', CheckSeverity.OFF
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    lombok {
        version = '1.18.4'
        sha256 = '39f3922deb679b1852af519eb227157ef2dd0a21eec3542c8ce1b45f2df39742'
    }

    pmd {
        consoleOutput = true
        ruleSetFiles = files(rootProject.file('config/pmd/pmd.xml'))
        ruleSets = []
    }

    spotless {
        java {
            eclipse('4.9.0').configFile rootProject.file('.eclipse/format/triplea_java_eclipse_format_style.xml')
            endWithNewline()
            importOrder(*getEclipseImportOrder())
            removeUnusedImports()
            trimTrailingWhitespace()
        }
    }

    test {
        useJUnitPlatform {
            excludeTags 'integration'
        }
    }

    task integTest(type: Test) {
        useJUnitPlatform {
            includeTags 'integration'
        }
    }
}
